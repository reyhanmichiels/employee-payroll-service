// Code generated by MockGen. DO NOT EDIT.
// Source: src/business/domain/overtime/overtime.go
//
// Generated by this command:
//
//	mockgen -source src/business/domain/overtime/overtime.go -destination src/business/domain/mock/overtime/overtime.go
//

// Package mock_overtime is a generated GoMock package.
package mock_overtime

import (
	context "context"
	reflect "reflect"

	entity "github.com/reyhanmichies/employee-payroll-service/src/business/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterface) Create(ctx context.Context, param entity.OvertimeInputParam) (entity.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(entity.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInterfaceMockRecorder) Create(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterface)(nil).Create), ctx, param)
}

// Get mocks base method.
func (m *MockInterface) Get(ctx context.Context, param entity.OvertimeParam) (entity.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, param)
	ret0, _ := ret[0].(entity.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), ctx, param)
}

// GetList mocks base method.
func (m *MockInterface) GetList(ctx context.Context, param entity.OvertimeParam) ([]entity.Overtime, *entity.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, param)
	ret0, _ := ret[0].([]entity.Overtime)
	ret1, _ := ret[1].(*entity.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockInterfaceMockRecorder) GetList(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockInterface)(nil).GetList), ctx, param)
}

// Update mocks base method.
func (m *MockInterface) Update(ctx context.Context, updateParam entity.OvertimeUpdateParam, selectParam entity.OvertimeParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, updateParam, selectParam)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInterfaceMockRecorder) Update(ctx, updateParam, selectParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInterface)(nil).Update), ctx, updateParam, selectParam)
}

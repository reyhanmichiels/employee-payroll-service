// Code generated by MockGen. DO NOT EDIT.
// Source: src/business/domain/transactor/transactor.go
//
// Generated by this command:
//
//	mockgen -source src/business/domain/transactor/transactor.go -destination src/business/domain/mock/transactor/transactor.go
//

// Package mock_transactor is a generated GoMock package.
package mock_transactor

import (
	context "context"
	reflect "reflect"

	sql "github.com/reyhanmichiels/go-pkg/v2/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockInterface) Execute(ctx context.Context, name string, txOpts sql.TxOptions, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, name, txOpts, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockInterfaceMockRecorder) Execute(ctx, name, txOpts, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockInterface)(nil).Execute), ctx, name, txOpts, f)
}
